// app/static/js/modern-features.js

/**
 * Modern AI Research Platform Frontend
 * Complete feature-rich JavaScript library
 */

class ModernPlatform {
    constructor() {
        this.themes = [
            { id: 'dark', name: '🌙 Dark', description: 'Default Dark Theme' },
            { id: 'light', name: '☀️ Light', description: 'Clean Light Theme' },
            { id: 'cyberpunk', name: '🌈 Cyberpunk', description: 'Neon Cyberpunk Style' },
            { id: 'nature', name: '🌿 Nature', description: 'Green Nature Theme' },
            { id: 'ocean', name: '🌊 Ocean', description: 'Deep Ocean Blue' },
            { id: 'fire', name: '🔥 Fire', description: 'Hot Fire Theme' }
        ];
        
        this.currentTheme = localStorage.getItem('platform-theme') || 'dark';
        this.notifications = [];
        this.modals = new Map();
        this.charts = new Map();
        
        this.init();
    }
    
    init() {
        this.applyTheme(this.currentTheme);
        this.initThemeSwatcher();
        this.initNotifications();
        this.initModals();
        this.initDragDrop();
        this.initCharts();
        this.initSearch();
        this.initLazyLoading();
        this.initKeyboardShortcuts();
        this.initProgressBars();
        this.bindEvents();
        
        console.log('🚀 Modern Platform initialized!');
    }
    
    // ===== THEME SYSTEM =====
    applyTheme(themeId) {
        document.body.setAttribute('data-theme', themeId);
        this.currentTheme = themeId;
        localStorage.setItem('platform-theme', themeId);
        
        // Update theme button
        const btn = document.getElementById('theme-btn');
        if (btn) {
            const theme = this.themes.find(t => t.id === themeId);
            btn.innerHTML = `${theme.name} ▼`;
        }
        
        // Emit theme change event
        this.emit('themeChanged', { theme: themeId });
    }
    
    initThemeSwatcher() {
        // Create theme switcher button
        const nav = document.querySelector('.nav');
        if (!nav) return;
        
        const currentTheme = this.themes.find(t => t.id === this.currentTheme);
        const button = document.createElement('button');
        button.id = 'theme-btn';
        button.className = 'nav-link dropdown-toggle';
        button.innerHTML = `${currentTheme.name} ▼`;
        
        // Create dropdown
        const dropdown = document.createElement('div');
        dropdown.className = 'dropdown';
        dropdown.appendChild(button);
        
        const menu = document.createElement('div');
        menu.className = 'dropdown-menu';
        
        this.themes.forEach(theme => {
            const item = document.createElement('button');
            item.className = 'dropdown-item';
            item.innerHTML = `${theme.name}<br><small>${theme.description}</small>`;
            item.onclick = () => {
                this.applyTheme(theme.id);
                dropdown.classList.remove('active');
            };
            menu.appendChild(item);
        });
        
        dropdown.appendChild(menu);
        
        button.onclick = (e) => {
            e.stopPropagation();
            dropdown.classList.toggle('active');
        };
        
        // Close dropdown when clicking outside
        document.addEventListener('click', () => {
            dropdown.classList.remove('active');
        });
        
        nav.appendChild(dropdown);
    }
    
    // ===== NOTIFICATION SYSTEM =====
    initNotifications() {
        // Create toast container
        const container = document.createElement('div');
        container.id = 'toast-container';
        container.className = 'toast-container';
        document.body.appendChild(container);
    }
    
    notify(title, message, type = 'info', duration = 5000) {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icons = {
            success: '✓',
            error: '✕',
            warning: '⚠',
            info: 'ℹ'
        };
        
        toast.innerHTML = `
            <div class="toast-icon">${icons[type] || icons.info}</div>
            <div class="toast-content">
                <div class="toast-title">${title}</div>
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close">×</button>
        `;
        
        const container = document.getElementById('toast-container');
        container.appendChild(toast);
        
        // Show animation
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Auto remove
        if (duration > 0) {
            setTimeout(() => this.removeToast(toast), duration);
        }
        
        // Close button
        toast.querySelector('.toast-close').onclick = () => this.removeToast(toast);
        
        return toast;
    }
    
    removeToast(toast) {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }
    
    // ===== MODAL SYSTEM =====
    initModals() {
        // Close modals with Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
    }
    
    showModal(id, options = {}) {
        const modal = document.getElementById(id);
        if (!modal) {
            console.warn(`Modal with id "${id}" not found`);
            return;
        }
        
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        // Focus first input
        const firstInput = modal.querySelector('input, textarea, select');
        if (firstInput) {
            setTimeout(() => firstInput.focus(), 100);
        }
        
        this.modals.set(id, modal);
        this.emit('modalOpened', { id, modal });
    }
    
    closeModal(id) {
        const modal = document.getElementById(id);
        if (modal) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
            this.modals.delete(id);
            this.emit('modalClosed', { id, modal });
        }
    }
    
    closeAllModals() {
        this.modals.forEach((modal, id) => {
            this.closeModal(id);
        });
    }
    
    createModal(id, title, content, options = {}) {
        const overlay = document.createElement('div');
        overlay.className = 'modal-overlay';
        overlay.id = id;
        
        overlay.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">${title}</h3>
                    <button class="modal-close" onclick="platform.closeModal('${id}')">×</button>
                </div>
                <div class="modal-body">
                    ${content}
                </div>
                ${options.footer ? `<div class="modal-footer">${options.footer}</div>` : ''}
            </div>
        `;
        
        // Close on backdrop click
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
                this.closeModal(id);
            }
        });
        
        document.body.appendChild(overlay);
        return overlay;
    }
    
    // ===== DRAG & DROP =====
    initDragDrop() {
        const dropZones = document.querySelectorAll('[data-drop-zone]');
        
        dropZones.forEach(zone => {
            zone.addEventListener('dragover', this.handleDragOver.bind(this));
            zone.addEventListener('drop', this.handleDrop.bind(this));
            zone.addEventListener('dragenter', this.handleDragEnter.bind(this));
            zone.addEventListener('dragleave', this.handleDragLeave.bind(this));
        });
    }
    
    handleDragOver(e) {
        e.preventDefault();
        e.currentTarget.classList.add('drag-over');
    }
    
    handleDragEnter(e) {
        e.preventDefault();
        e.currentTarget.classList.add('drag-active');
    }
    
    handleDragLeave(e) {
        e.currentTarget.classList.remove('drag-over', 'drag-active');
    }
    
    handleDrop(e) {
        e.preventDefault();
        const zone = e.currentTarget;
        zone.classList.remove('drag-over', 'drag-active');
        
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            this.handleFileUpload(files, zone);
        }
    }
    
    handleFileUpload(files, zone) {
        const allowedTypes = zone.dataset.allowedTypes?.split(',') || [];
        const maxSize = parseInt(zone.dataset.maxSize) || 10 * 1024 * 1024; // 10MB default
        
        files.forEach(file => {
            // Validate file type
            if (allowedTypes.length > 0 && !allowedTypes.some(type => file.name.endsWith(type))) {
                this.notify('File Error', `File type not allowed: ${file.name}`, 'error');
                return;
            }
            
            // Validate file size
            if (file.size > maxSize) {
                this.notify('File Error', `File too large: ${file.name}`, 'error');
                return;
            }
            
            this.uploadFile(file, zone);
        });
    }
    
    uploadFile(file, zone) {
        const formData = new FormData();
        formData.append('file', file);
        
        // Create progress bar
        const progressId = 'upload-' + Date.now();
        const progressHtml = `
            <div class="upload-progress" id="${progressId}">
                <div class="upload-info">
                    <span class="file-name">${file.name}</span>
                    <span class="file-size">${this.formatFileSize(file.size)}</span>
                </div>
                <div class="progress">
                    <div class="progress-bar" style="width: 0%"></div>
                </div>
            </div>
        `;
        
        zone.insertAdjacentHTML('beforeend', progressHtml);
        const progressElement = document.getElementById(progressId);
        const progressBar = progressElement.querySelector('.progress-bar');
        
        // Simulate upload progress (replace with real XMLHttpRequest)
        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress >= 100) {
                progress = 100;
                clearInterval(interval);
                
                setTimeout(() => {
                    progressElement.remove();
                    this.notify('Upload Complete', `${file.name} uploaded successfully`, 'success');
                }, 500);
            }
            
            progressBar.style.width = progress + '%';
        }, 200);
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // ===== SEARCH WITH AUTOCOMPLETE =====
    initSearch() {
        const searchInputs = document.querySelectorAll('[data-search]');
        
        searchInputs.forEach(input => {
            let timeout;
            const dropdown = this.createSearchDropdown(input);
            
            input.addEventListener('input', (e) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    this.performSearch(e.target.value, dropdown, input);
                }, 300);
            });
            
            // Hide dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (!input.contains(e.target) && !dropdown.contains(e.target)) {
                    dropdown.style.display = 'none';
                }
            });
        });
    }
    
    createSearchDropdown(input) {
        const dropdown = document.createElement('div');
        dropdown.className = 'search-dropdown';
        dropdown.style.cssText = `
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: var(--bg-elevated);
            border: 1px solid var(--border-default);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            max-height: 300px;
            overflow-y: auto;
            z-index: var(--z-dropdown);
            display: none;
        `;
        
        const container = input.parentNode;
        container.style.position = 'relative';
        container.appendChild(dropdown);
        
        return dropdown;
    }
    
    performSearch(query, dropdown, input) {
        if (query.length < 2) {
            dropdown.style.display = 'none';
            return;
        }
        
        // Show loading
        dropdown.innerHTML = '<div class="search-loading">🔍 Searching...</div>';
        dropdown.style.display = 'block';
        
        // Simulate API call (replace with real fetch)
        setTimeout(() => {
            const results = this.mockSearchResults(query);
            this.displaySearchResults(results, dropdown, input);
        }, 500);
    }
    
    mockSearchResults(query) {
        const mockData = [
            { title: 'Project Alpha', type: 'project', url: '/projects/1' },
            { title: 'Beta Analysis Report', type: 'document', url: '/docs/beta' },
            { title: 'Data Source Gamma', type: 'source', url: '/sources/gamma' },
            { title: 'Research Notes Delta', type: 'note', url: '/notes/delta' }
        ];
        
        return mockData.filter(item => 
            item.title.toLowerCase().includes(query.toLowerCase())
        );
    }
    
    displaySearchResults(results, dropdown, input) {
        if (results.length === 0) {
            dropdown.innerHTML = '<div class="search-empty">No results found</div>';
            return;
        }
        
        const html = results.map(result => `
            <div class="search-result" onclick="platform.selectSearchResult('${result.url}')">
                <div class="result-title">${result.title}</div>
                <div class="result-type">${result.type}</div>
            </div>
        `).join('');
        
        dropdown.innerHTML = html;
    }
    
    selectSearchResult(url) {
        window.location.href = url;
    }
    
    // ===== CHARTS AND VISUALIZATIONS =====
    initCharts() {
        // Initialize Chart.js if available
        if (typeof Chart !== 'undefined') {
            this.createDashboardCharts();
        }
    }
    
    createDashboardCharts() {
        // Projects overview chart
        const projectsCanvas = document.getElementById('projects-chart');
        if (projectsCanvas) {
            const ctx = projectsCanvas.getContext('2d');
            this.charts.set('projects', new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Active', 'Completed', 'Pending'],
                    datasets: [{
                        data: [12, 8, 3],
                        backgroundColor: [
                            'var(--accent-green)',
                            'var(--accent-blue)',
                            'var(--accent-orange)'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: 'var(--text-primary)',
                                usePointStyle: true,
                                padding: 20
                            }
                        }
                    }
                }
            }));
        }
        
        // Activity timeline chart
        const activityCanvas = document.getElementById('activity-chart');
        if (activityCanvas) {
            const ctx = activityCanvas.getContext('2d');
            this.charts.set('activity', new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    datasets: [{
                        label: 'Research Activity',
                        data: [12, 19, 8, 15, 25, 8, 14],
                        borderColor: 'var(--accent-blue)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'var(--border-subtle)'
                            },
                            ticks: {
                                color: 'var(--text-secondary)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'var(--border-subtle)'
                            },
                            ticks: {
                                color: 'var(--text-secondary)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'var(--text-primary)'
                            }
                        }
                    }
                }
            }));
        }
    }
    
    // ===== LAZY LOADING =====
    initLazyLoading() {
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        observer.unobserve(img);
                    }
                });
            });
            
            const lazyImages = document.querySelectorAll('img[data-src]');
            lazyImages.forEach(img => {
                img.classList.add('lazy');
                imageObserver.observe(img);
            });
            
            // Lazy load sections
            const sectionObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-in');
                    }
                });
            });
            
            const sections = document.querySelectorAll('[data-animate]');
            sections.forEach(section => {
                sectionObserver.observe(section);
            });
        }
    }
    
    // ===== KEYBOARD SHORTCUTS =====
    initKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + K for search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                this.focusSearch();
            }
            
            // Ctrl/Cmd + N for new project
            if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                e.preventDefault();
                this.showModal('new-project-modal');
            }
            
            // Ctrl/Cmd + , for settings
            if ((e.ctrlKey || e.metaKey) && e.key === ',') {
                e.preventDefault();
                this.showModal('settings-modal');
            }
            
            // Escape to close current modal
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
    }
    
    focusSearch() {
        const searchInput = document.querySelector('[data-search]');
        if (searchInput) {
            searchInput.focus();
            searchInput.select();
        }
    }
    
    // ===== PROGRESS BARS =====
    initProgressBars() {
        const progressBars = document.querySelectorAll('[data-progress]');
        
        progressBars.forEach(bar => {
            const targetValue = parseInt(bar.dataset.progress) || 0;
            const progressFill = bar.querySelector('.progress-bar');
            
            if (progressFill) {
                // Animate to target value
                this.animateProgress(progressFill, 0, targetValue, 1000);
            }
        });
    }
    
    animateProgress(element, start, end, duration) {
        const startTime = performance.now();
        
        const updateProgress = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const currentValue = start + (end - start) * this.easeOutCubic(progress);
            
            element.style.width = currentValue + '%';
            
            if (progress < 1) {
                requestAnimationFrame(updateProgress);
            }
        };
        
        requestAnimationFrame(updateProgress);
    }
    
    easeOutCubic(t) {
        return 1 - Math.pow(1 - t, 3);
    }
    
    // ===== REAL-TIME DATA =====
    initRealTime() {
        // Simulate real-time updates
        setInterval(() => {
            this.updateDashboardStats();
        }, 30000); // Every 30 seconds
        
        // WebSocket connection (if available)
        if ('WebSocket' in window) {
            this.initWebSocket();
        }
    }
    
    updateDashboardStats() {
        fetch('/api/stats')
            .then(response => response.json())
            .then(data => {
                this.updateStatCards(data);
                this.emit('statsUpdated', data);
            })
            .catch(error => {
                console.warn('Failed to update stats:', error);
            });
    }
    
    updateStatCards(stats) {
        const statCards = document.querySelectorAll('[data-stat]');
        
        statCards.forEach(card => {
            const statType = card.dataset.stat;
            const valueElement = card.querySelector('.stat-value');
            
            if (valueElement && stats[statType] !== undefined) {
                const oldValue = parseInt(valueElement.textContent) || 0;
                const newValue = stats[statType];
                
                if (oldValue !== newValue) {
                    this.animateNumber(valueElement, oldValue, newValue, 1000);
                    
                    // Add pulse animation
                    card.classList.add('updated');
                    setTimeout(() => card.classList.remove('updated'), 1000);
                }
            }
        });
    }
    
    animateNumber(element, start, end, duration) {
        const startTime = performance.now();
        
        const updateNumber = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const currentValue = Math.round(start + (end - start) * this.easeOutCubic(progress));
            
            element.textContent = currentValue;
            
            if (progress < 1) {
                requestAnimationFrame(updateNumber);
            }
        };
        
        requestAnimationFrame(updateNumber);
    }
    
    // ===== EVENT SYSTEM =====
    emit(eventName, data) {
        const event = new CustomEvent(eventName, { detail: data });
        document.dispatchEvent(event);
    }
    
    on(eventName, callback) {
        document.addEventListener(eventName, callback);
    }
    
    off(eventName, callback) {
        document.removeEventListener(eventName, callback);
    }
    
    // ===== UTILITIES =====
    bindEvents() {
        // Bind click events for buttons
        document.addEventListener('click', (e) => {
            // Modal triggers
            if (e.target.matches('[data-modal]')) {
                e.preventDefault();
                const modalId = e.target.dataset.modal;
                this.showModal(modalId);
            }
            
            // Notification triggers
            if (e.target.matches('[data-notify]')) {
                e.preventDefault();
                const { title, message, type } = e.target.dataset;
                this.notify(title || 'Notification', message || 'Something happened', type || 'info');
            }
            
            // Copy to clipboard
            if (e.target.matches('[data-copy]')) {
                e.preventDefault();
                const text = e.target.dataset.copy;
                navigator.clipboard.writeText(text).then(() => {
                    this.notify('Copied!', 'Text copied to clipboard', 'success', 2000);
                });
            }
        });
        
        // Form enhancements
        document.addEventListener('submit', (e) => {
            if (e.target.matches('[data-ajax]')) {
                e.preventDefault();
                this.submitFormAjax(e.target);
            }
        });
    }
    
    submitFormAjax(form) {
        const formData = new FormData(form);
        const submitBtn = form.querySelector('[type="submit"]');
        
        // Show loading state
        if (submitBtn) {
            submitBtn.classList.add('btn-loading');
            submitBtn.disabled = true;
        }
        
        fetch(form.action, {
            method: form.method || 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                this.notify('Success!', data.message || 'Form submitted successfully', 'success');
                form.reset();
            } else {
                this.notify('Error', data.message || 'Something went wrong', 'error');
            }
        })
        .catch(error => {
            this.notify('Error', 'Network error occurred', 'error');
            console.error('Form submission error:', error);
        })
        .finally(() => {
            // Remove loading state
            if (submitBtn) {
                submitBtn.classList.remove('btn-loading');
                submitBtn.disabled = false;
            }
        });
    }
    
    // ===== API HELPERS =====
    async apiGet(url) {
        try {
            const response = await fetch(url);
            return await response.json();
        } catch (error) {
            this.notify('API Error', 'Failed to fetch data', 'error');
            throw error;
        }
    }
    
    async apiPost(url, data) {
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            return await response.json();
        } catch (error) {
            this.notify('API Error', 'Failed to send data', 'error');
            throw error;
        }
    }
    
    // ===== PERFORMANCE MONITORING =====
    initPerformanceMonitoring() {
        // Monitor page load time
        window.addEventListener('load', () => {
            const loadTime = performance.now();
            console.log(`✨ Page loaded in ${loadTime.toFixed(2)}ms`);
            
            if (loadTime > 3000) {
                console.warn('⚠️ Slow page load detected');
            }
        });
        
        // Monitor memory usage (if available)
        if ('memory' in performance) {
            setInterval(() => {
                const memory = performance.memory;
                if (memory.usedJSHeapSize > memory.jsHeapSizeLimit * 0.9) {
                    console.warn('⚠️ High memory usage detected');
                }
            }, 60000); // Check every minute
        }
    }
    
    // ===== ACCESSIBILITY =====
    initAccessibility() {
        // Focus management
        this.setupFocusTraps();
        
        // Screen reader announcements
        this.setupScreenReaderAnnouncements();
        
        // Keyboard navigation
        this.setupKeyboardNavigation();
    }
    
    setupFocusTraps() {
        // Trap focus in modals
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                const activeModal = document.querySelector('.modal-overlay.active');
                if (activeModal) {
                    this.trapFocus(e, activeModal);
                }
            }
        });
    }
    
    trapFocus(e, container) {
        const focusableElements = container.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey) {
            if (document.activeElement === firstElement) {
                lastElement.focus();
                e.preventDefault();
            }
        } else {
            if (document.activeElement === lastElement) {
                firstElement.focus();
                e.preventDefault();
            }
        }
    }
    
    setupScreenReaderAnnouncements() {
        // Create announcement region
        const announcer = document.createElement('div');
        announcer.setAttribute('aria-live', 'polite');
        announcer.setAttribute('aria-atomic', 'true');
        announcer.className = 'sr-only';
        announcer.style.cssText = `
            position: absolute !important;
            width: 1px !important;
            height: 1px !important;
            padding: 0 !important;
            margin: -1px !important;
            overflow: hidden !important;
            clip: rect(0,0,0,0) !important;
            white-space: nowrap !important;
            border: 0 !important;
        `;
        document.body.appendChild(announcer);
        
        this.announcer = announcer;
    }
    
    announce(message) {
        if (this.announcer) {
            this.announcer.textContent = message;
        }
    }
    
    setupKeyboardNavigation() {
        // Skip to main content link
        const skipLink = document.createElement('a');
        skipLink.href = '#main-content';
        skipLink.textContent = 'Skip to main content';
        skipLink.className = 'skip-link';
        skipLink.style.cssText = `
            position: absolute;
            top: -40px;
            left: 6px;
            background: var(--bg-primary);
            color: var(--text-primary);
            padding: 8px;
            text-decoration: none;
            border-radius: 4px;
            z-index: 1000;
            transition: top 0.3s;
        `;
        
        skipLink.addEventListener('focus', () => {
            skipLink.style.top = '6px';
        });
        
        skipLink.addEventListener('blur', () => {
            skipLink.style.top = '-40px';
        });
        
        document.body.insertBefore(skipLink, document.body.firstChild);
    }
}

// Initialize platform when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.platform = new ModernPlatform();
});

// Service Worker registration (if available)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/static/js/sw.js')
            .then(registration => {
                console.log('✅ Service Worker registered');
            })
            .catch(error => {
                console.log('❌ Service Worker registration failed');
            });
    });
}