import uvicorn
from fastapi import FastAPI, Depends, HTTPException, Query, Request, Form, File, UploadFile
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from typing import List, Optional
from pathlib import Path
import pandas as pd

from .core.database import get_db
from . import crud
from .schemas import project as project_schema, source as source_schema

# Create FastAPI app instance
app = FastAPI(
    title="AI Augmented Research Platform",
    description="Backend API for the research platform",
    version="0.3.0"
)

# Setup template e static files
static_dir = Path("app/static")
templates_dir = Path("app/templates")
static_dir.mkdir(exist_ok=True)
templates_dir.mkdir(exist_ok=True)

app.mount("/static", StaticFiles(directory=static_dir), name="static")
templates = Jinja2Templates(directory=templates_dir)

# --- Endpoint per la RICERCA ---
@app.get("/search/", response_model=List[source_schema.Source], tags=["Search"])
def search_in_sources(q: str = Query(..., min_length=3), db: Session = Depends(get_db)):
    """
    Esegue una ricerca full-text nel contenuto di tutte le fonti.
    """
    results = crud.search_sources_content(db=db, query=q)
    return results

# --- Endpoints per PROGETTI ---
@app.post("/projects/", response_model=project_schema.Project, tags=["Projects"])
def create_project_endpoint(project: project_schema.ProjectCreate, db: Session = Depends(get_db)):
    return crud.create_project(db=db, project=project)

@app.get("/projects/", response_model=List[project_schema.Project], tags=["Projects"])
def read_projects_endpoint(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    return crud.get_projects(db, skip=skip, limit=limit)

@app.get("/projects/{project_id}", response_model=project_schema.Project, tags=["Projects"])
def read_project_endpoint(project_id: int, db: Session = Depends(get_db)):
    db_project = crud.get_project(db, project_id=project_id)
    if db_project is None: 
        raise HTTPException(status_code=404, detail="Project not found")
    return db_project

@app.put("/projects/{project_id}", response_model=project_schema.Project, tags=["Projects"])
def update_project_endpoint(project_id: int, project: project_schema.ProjectUpdate, db: Session = Depends(get_db)):
    db_project = crud.update_project(db, project_id=project_id, project_update=project)
    if db_project is None: 
        raise HTTPException(status_code=404, detail="Project not found")
    return db_project

@app.delete("/projects/{project_id}", response_model=project_schema.Project, tags=["Projects"])
def delete_project_endpoint(project_id: int, db: Session = Depends(get_db)):
    db_project = crud.delete_project(db, project_id=project_id)
    if db_project is None: 
        raise HTTPException(status_code=404, detail="Project not found")
    return db_project

# --- Endpoints per le FONTI ---
@app.post("/projects/{project_id}/sources/", response_model=source_schema.Source, tags=["Sources"])
def create_source_for_project_endpoint(project_id: int, source: source_schema.SourceCreate, db: Session = Depends(get_db)):
    db_project = crud.get_project(db, project_id=project_id)
    if db_project is None: 
        raise HTTPException(status_code=404, detail="Project not found")
    return crud.create_project_source(db=db, source=source, project_id=project_id)

@app.get("/projects/{project_id}/sources/", response_model=List[source_schema.Source], tags=["Sources"])
def read_sources_for_project_endpoint(project_id: int, skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_project = crud.get_project(db, project_id=project_id)
    if db_project is None: 
        raise HTTPException(status_code=404, detail="Project not found")
    return crud.get_sources_for_project(db=db, project_id=project_id, skip=skip, limit=limit)

@app.put("/sources/{source_id}", response_model=source_schema.Source, tags=["Sources"])
def update_source_content_endpoint(source_id: int, source_update: source_schema.SourceUpdate, db: Session = Depends(get_db)):
    db_source = crud.update_source_content(db, source_id=source_id, content=source_update.content)
    if db_source is None: 
        raise HTTPException(status_code=404, detail="Source not found")
    return db_source

# === FRONTEND ROUTES ===
@app.get("/", response_class=HTMLResponse, tags=["Frontend"])
async def dashboard_redirect():
    return RedirectResponse(url="/dashboard")

@app.get("/dashboard", response_class=HTMLResponse, tags=["Frontend"])
async def dashboard_main(request: Request, db: Session = Depends(get_db)):
    try:
        projects = crud.get_projects(db)
        total_projects = len(projects)
        total_sources = sum(len(p.sources) for p in projects)
        sources_with_content = sum(1 for p in projects for s in p.sources if s.content)

        stats = {
            "total_projects": total_projects,
            "total_sources": total_sources,
            "sources_with_content": sources_with_content,
            "sources_without_content": total_sources - sources_with_content
        }

        return templates.TemplateResponse("dashboard.html", {
            "request": request,
            "stats": stats,
            "projects": projects
        })
    except Exception as e:
        return HTMLResponse(f"<h1>Dashboard Error: {str(e)}</h1>")

@app.get("/projects/view", response_class=HTMLResponse, tags=["Frontend"])
async def view_projects(request: Request, db: Session = Depends(get_db)):
    try:
        projects = crud.get_projects(db)
        return templates.TemplateResponse("projects.html", {
            "request": request,
            "projects": projects
        })
    except Exception as e:
        return HTMLResponse(f"<h1>Projects Error: {str(e)}</h1>")

@app.get("/search/view", response_class=HTMLResponse, tags=["Frontend"])
async def search_page(request: Request):
    try:
        return templates.TemplateResponse("search.html", {"request": request})
    except Exception:
        return HTMLResponse("<h1>Search form</h1><form action='/search/results' method='post'><input name='q' required><button type='submit'>Search</button></form>")

@app.post("/search/results", response_class=HTMLResponse, tags=["Frontend"])
async def search_results(request: Request, q: str = Form(...), db: Session = Depends(get_db)):
    try:
        results = crud.search_sources_content(db=db, query=q)
        return HTMLResponse(f"<h1>Results for: {q}</h1><p>Found {len(results)} results</p><a href='/search/view'>← Back</a>")
    except Exception as e:
        return HTMLResponse(f"<h1>Search Error: {str(e)}</h1>")

@app.get("/import", response_class=HTMLResponse, tags=["Frontend"])
async def import_page(request: Request):
    try:
        return templates.TemplateResponse("import.html", {"request": request})
    except Exception:
        return HTMLResponse("<h1>Import</h1><form action='/import/excel' method='post' enctype='multipart/form-data'><input name='project_name' placeholder='Project name' required><input type='file' name='file' accept='.xlsx,.xls' required><button type='submit'>Import</button></form>")

@app.post("/import/excel", tags=["Frontend"])
async def import_excel_file(file: UploadFile = File(...), project_name: str = Form(...), db: Session = Depends(get_db)):
    try:
        if not file.filename.endswith(('.xlsx', '.xls')):
            return HTMLResponse("<h1>Error: File must be Excel format</h1>")

        contents = await file.read()
        df = pd.read_excel(contents)

        # Create or get project
        project = None
        projects = crud.get_projects(db)
        for p in projects:
            if p.name.lower() == project_name.lower():
                project = p
                break

        if not project:
            project_data = project_schema.ProjectCreate(name=project_name, description=f"Imported from {file.filename}")
            project = crud.create_project(db, project_data)

        # Import sources
        imported_count = 0
        for _, row in df.iterrows():
            title = str(row.get('Nome', row.get('Title', row.get('name', ''))))
            url = str(row.get('URL', row.get('Url', row.get('url', ''))))

            if title and url and title != 'nan' and url != 'nan':
                source_data = source_schema.SourceCreate(title=title, url=url, project_id=project.id)
                try:
                    crud.create_source(db, source_data)
                    imported_count += 1
                except:
                    pass

        return HTMLResponse(f"<h1>Import Success</h1><p>Imported {imported_count} sources to project '{project_name}'</p><a href='/dashboard'>← Dashboard</a>")

    except Exception as e:
        return HTMLResponse(f"<h1>Import Error: {str(e)}</h1>")

@app.get("/api/stats", tags=["Frontend API"])
async def get_dashboard_stats(db: Session = Depends(get_db)):
    try:
        projects = crud.get_projects(db)
        total_projects = len(projects)
        total_sources = sum(len(p.sources) for p in projects)
        sources_with_content = sum(1 for p in projects for s in p.sources if s.content)

        return {
            "total_projects": total_projects,
            "total_sources": total_sources,
            "sources_with_content": sources_with_content,
            "sources_without_content": total_sources - sources_with_content
        }
    except Exception as e:
        return {"error": str(e)}

# --- Run Server ---
if __name__ == "__main__":
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)
